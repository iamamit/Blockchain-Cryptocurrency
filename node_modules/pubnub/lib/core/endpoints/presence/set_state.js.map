{"version":3,"sources":["core/endpoints/presence/set_state.js"],"names":[],"mappings":";;;;;QAIgB,Y,GAAA,Y;QAIA,c,GAAA,c;QAQA,M,GAAA,M;QAOA,iB,GAAA,iB;QAIA,e,GAAA,e;QAIA,a,GAAA,a;QAaA,c,GAAA,c;;AA1ChB;;AAEO,SAAS,YAAT,GAAgC;AACrC,SAAO,qBAAP;AACD;;AAEM,SAAS,cAAT,CAAwB,OAAxB,EAAgD,cAAhD,EAAmF;AAAA,MAClF,MADkF,GACvE,OADuE,CAClF,MADkF;AAAA,MAElF,KAFkF,GAExE,cAFwE,CAElF,KAFkF;;;AAIxF,MAAI,CAAC,KAAL,EAAY,OAAO,eAAP;AACZ,MAAI,CAAC,OAAO,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAAS,MAAT,CAAgB,OAAhB,EAAwC,cAAxC,EAAmF;AAAA,MAClF,MADkF,GACvE,OADuE,CAClF,MADkF;AAAA,8BAEhE,cAFgE,CAElF,QAFkF;AAAA,MAElF,QAFkF,yCAEvE,EAFuE;;AAGxF,MAAI,sBAAsB,SAAS,MAAT,GAAkB,CAAlB,GAAsB,SAAS,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAArE;AACA,SAAO,0BAA0B,OAAO,YAAjC,GAAgD,WAAhD,GAA8D,mBAA9D,GAAoF,QAApF,GAA+F,OAAO,IAAtG,GAA6G,OAApH;AACD;;AAEM,SAAS,iBAAT,OAAsD;AAAA,MAAzB,MAAyB,QAAzB,MAAyB;;AAC3D,SAAO,OAAO,qBAAP,EAAP;AACD;;AAEM,SAAS,eAAT,GAA2B;AAChC,SAAO,IAAP;AACD;;AAEM,SAAS,aAAT,CAAuB,OAAvB,EAA+C,cAA/C,EAA0F;AAAA,MACzF,KADyF,GAC3D,cAD2D,CACzF,KADyF;AAAA,+BAC3D,cAD2D,CAClF,aADkF;AAAA,MAClF,aADkF,0CAClE,EADkE;;AAE/F,MAAM,SAAS,EAAf;;AAEA,SAAO,KAAP,GAAe,mBAAmB,KAAK,SAAL,CAAe,KAAf,CAAnB,CAAf;;AAEA,MAAI,cAAc,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,WAAO,eAAP,IAA0B,mBAAmB,cAAc,IAAd,CAAmB,GAAnB,CAAnB,CAA1B;AACD;;AAED,SAAO,MAAP;AACD;;AAEM,SAAS,cAAT,CAAwB,OAAxB,EAAgD,cAAhD,EAA0F;AAC/F,SAAO,EAAE,OAAO,eAAe,OAAxB,EAAP;AACD","file":"core/endpoints/presence/set_state.js","sourcesContent":["/* @flow */\n\nimport { SetStateArguments, SetStateResponse, ModulesInject } from '../../flow_interfaces';\n\nexport function getOperation(): string {\n  return 'PNSetStateOperation';\n}\n\nexport function validateParams(modules: ModulesInject, incomingParams: SetStateArguments) {\n  let { config } = modules;\n  let { state } = incomingParams;\n\n  if (!state) return 'Missing State';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: SetStateArguments): string {\n  let { config } = modules;\n  let { channels = [] } = incomingParams;\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return '/v2/presence/sub-key/' + config.subscribeKey + '/channel/' + stringifiedChannels + '/uuid/' + config.UUID + '/data';\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: SetStateArguments): Object {\n  let { state, channelGroups = [] } = incomingParams;\n  const params = {};\n\n  params.state = encodeURIComponent(JSON.stringify(state));\n\n  if (channelGroups.length > 0) {\n    params['channel-group'] = encodeURIComponent(channelGroups.join(','));\n  }\n\n  return params;\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: Object): SetStateResponse {\n  return { state: serverResponse.payload };\n}\n"],"sourceRoot":"/source/"}