{"version":3,"sources":["core/endpoints/presence/here_now.js"],"names":[],"mappings":"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","file":"core/endpoints/presence/here_now.js","sourcesContent":["/* @flow */\n\nimport { HereNowArguments, ModulesInject } from '../../flow_interfaces';\n\nexport function getOperation(): string {\n  return 'PNHereNowOperation';\n}\n\nexport function validateParams(modules: ModulesInject) {\n  let { config } = modules;\n\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: HereNowArguments): string {\n  let { config } = modules;\n  let { channels = [], channelGroups = [] } = incomingParams;\n  let baseURL = '/v2/presence/sub-key/' + config.subscribeKey;\n\n  if (channels.length > 0 || channelGroups.length > 0) {\n    let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n    baseURL += '/channel/' + encodeURIComponent(stringifiedChannels);\n  }\n\n  return baseURL;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): number {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: HereNowArguments): Object {\n  let { channelGroups = [], includeUUIDs = true, includeState = false } = incomingParams;\n  const params = {};\n\n  if (!includeUUIDs) params.disable_uuids = 1;\n  if (includeState) params.state = 1;\n\n  if (channelGroups.length > 0) {\n    params['channel-group'] = encodeURIComponent(channelGroups.join(','));\n  }\n\n  return params;\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: Object, incomingParams: HereNowArguments): Object {\n  let { channels = [], channelGroups = [], includeUUIDs = true, includeState = false } = incomingParams;\n\n  let prepareSingularChannel = () => {\n    let response = {};\n    let occupantsList = [];\n    response.totalChannels = 1;\n    response.totalOccupancy = serverResponse.occupancy;\n    response.channels = {};\n    response.channels[channels[0]] = {\n      occupants: occupantsList,\n      name: channels[0],\n      occupancy: serverResponse.occupancy\n    };\n\n    if (includeUUIDs) {\n      serverResponse.uuids.forEach((uuidEntry) => {\n        if (includeState) {\n          occupantsList.push({ state: uuidEntry.state, uuid: uuidEntry.uuid });\n        } else {\n          occupantsList.push({ state: null, uuid: uuidEntry });\n        }\n      });\n    }\n\n    return response;\n  };\n\n  let prepareMultipleChannel = () => {\n    let response = {};\n    response.totalChannels = serverResponse.payload.total_channels;\n    response.totalOccupancy = serverResponse.payload.total_occupancy;\n    response.channels = {};\n\n    Object.keys(serverResponse.payload.channels).forEach((channelName) => {\n      let channelEntry = serverResponse.payload.channels[channelName];\n      let occupantsList = [];\n      response.channels[channelName] = {\n        occupants: occupantsList,\n        name: channelName,\n        occupancy: channelEntry.occupancy\n      };\n\n      if (includeUUIDs) {\n        channelEntry.uuids.forEach((uuidEntry) => {\n          if (includeState) {\n            occupantsList.push({ state: uuidEntry.state, uuid: uuidEntry.uuid });\n          } else {\n            occupantsList.push({ state: null, uuid: uuidEntry });\n          }\n        });\n      }\n\n      return response;\n    });\n\n    return response;\n  };\n\n  let response;\n  if (channels.length > 1 || channelGroups.length > 0) {\n    response = prepareMultipleChannel();\n  } else {\n    response = prepareSingularChannel();\n  }\n\n  return response;\n}\n"],"sourceRoot":"/source/"}