{"version":3,"sources":["core/endpoints/access_manager/audit.js"],"names":[],"mappings":";;;;;QAIgB,Y,GAAA,Y;QAIA,c,GAAA,c;QAMA,M,GAAA,M;QAKA,iB,GAAA,iB;QAIA,e,GAAA,e;QAIA,a,GAAA,a;QAqBA,c,GAAA,c;;AA9ChB;;AAEO,SAAS,YAAT,GAAgC;AACrC,SAAO,sBAAP;AACD;;AAEM,SAAS,cAAT,CAAwB,OAAxB,EAAgD;AAAA,MAC/C,MAD+C,GACpC,OADoC,CAC/C,MAD+C;;;AAGrD,MAAI,CAAC,OAAO,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAAS,MAAT,CAAgB,OAAhB,EAAgD;AAAA,MAC/C,MAD+C,GACpC,OADoC,CAC/C,MAD+C;;AAErD,SAAO,4BAA4B,OAAO,YAA1C;AACD;;AAEM,SAAS,iBAAT,OAA8D;AAAA,MAAjC,MAAiC,QAAjC,MAAiC;;AACnE,SAAO,OAAO,qBAAP,EAAP;AACD;;AAEM,SAAS,eAAT,GAAoC;AACzC,SAAO,KAAP;AACD;;AAEM,SAAS,aAAT,CAAuB,OAAvB,EAA+C,cAA/C,EAAuF;AAAA,MACpF,OADoF,GAC3C,cAD2C,CACpF,OADoF;AAAA,MAC3E,YAD2E,GAC3C,cAD2C,CAC3E,YAD2E;AAAA,8BAC3C,cAD2C,CAC7D,QAD6D;AAAA,MAC7D,QAD6D,yCAClD,EADkD;;AAE5F,MAAM,SAAS,EAAf;;AAEA,SAAO,SAAP,GAAmB,KAAK,KAAL,CAAW,IAAI,IAAJ,GAAW,OAAX,KAAuB,IAAlC,CAAnB;;AAEA,MAAI,OAAJ,EAAa;AACX,WAAO,OAAP,GAAiB,OAAjB;AACD;;AAED,MAAI,YAAJ,EAAkB;AAChB,WAAO,eAAP,IAA0B,YAA1B;AACD;;AAED,MAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB;AACvB,WAAO,IAAP,GAAc,SAAS,IAAT,CAAc,GAAd,CAAd;AACD;;AAED,SAAO,MAAP;AACD;;AAEM,SAAS,cAAT,CAAwB,OAAxB,EAAgD,cAAhD,EAAgF;AACrF,SAAO,eAAe,OAAtB;AACD","file":"core/endpoints/access_manager/audit.js","sourcesContent":["/* @flow */\n\nimport { AuditArguments, ModulesInject } from '../../flow_interfaces';\n\nexport function getOperation(): string {\n  return 'PNAccessManagerAudit';\n}\n\nexport function validateParams(modules: ModulesInject) {\n  let { config } = modules;\n\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject): string {\n  let { config } = modules;\n  return '/v1/auth/audit/sub-key/' + config.subscribeKey;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): number {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return false;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: AuditArguments): Object {\n  const { channel, channelGroup, authKeys = [] } = incomingParams;\n  const params = {};\n\n  params.timestamp = Math.floor(new Date().getTime() / 1000);\n\n  if (channel) {\n    params.channel = channel;\n  }\n\n  if (channelGroup) {\n    params['channel-group'] = channelGroup;\n  }\n\n  if (authKeys.length > 0) {\n    params.auth = authKeys.join(',');\n  }\n\n  return params;\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: Object): Object {\n  return serverResponse.payload;\n}\n"],"sourceRoot":"/source/"}