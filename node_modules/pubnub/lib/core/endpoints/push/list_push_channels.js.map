{"version":3,"sources":["core/endpoints/push/list_push_channels.js"],"names":[],"mappings":";;;;;QAIgB,Y,GAAA,Y;QAIA,c,GAAA,c;QASA,M,GAAA,M;QAMA,iB,GAAA,iB;QAIA,e,GAAA,e;QAIA,a,GAAA,a;QAKA,c,GAAA,c;;AAlChB;;AAEO,SAAS,YAAT,GAAgC;AACrC,SAAO,4CAAP;AACD;;AAEM,SAAS,cAAT,CAAwB,OAAxB,EAAgD,cAAhD,EAAkF;AAAA,MACjF,MADiF,GACzD,cADyD,CACjF,MADiF;AAAA,MACzE,WADyE,GACzD,cADyD,CACzE,WADyE;AAAA,MAEjF,MAFiF,GAEtE,OAFsE,CAEjF,MAFiF;;;AAIvF,MAAI,CAAC,MAAL,EAAa,OAAO,4BAAP;AACb,MAAI,CAAC,WAAL,EAAkB,OAAO,4CAAP;AAClB,MAAI,CAAC,OAAO,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAAS,MAAT,CAAgB,OAAhB,EAAwC,cAAxC,EAAkF;AAAA,MACjF,MADiF,GACtE,cADsE,CACjF,MADiF;AAAA,MAEjF,MAFiF,GAEtE,OAFsE,CAEjF,MAFiF;;AAGvF,SAAO,sBAAsB,OAAO,YAA7B,GAA4C,WAA5C,GAA0D,MAAjE;AACD;;AAEM,SAAS,iBAAT,OAAsD;AAAA,MAAzB,MAAyB,QAAzB,MAAyB;;AAC3D,SAAO,OAAO,qBAAP,EAAP;AACD;;AAEM,SAAS,eAAT,GAA2B;AAChC,SAAO,IAAP;AACD;;AAEM,SAAS,aAAT,CAAuB,OAAvB,EAA+C,cAA/C,EAAyF;AAAA,MACxF,WADwF,GACxE,cADwE,CACxF,WADwF;;AAE9F,SAAO,EAAE,MAAM,WAAR,EAAP;AACD;;AAEM,SAAS,cAAT,CAAwB,OAAxB,EAAgD,cAAhD,EAAqG;AAC1G,SAAO,EAAE,UAAU,cAAZ,EAAP;AACD","file":"core/endpoints/push/list_push_channels.js","sourcesContent":["/* @flow */\n\nimport { ListChannelsArgs, ListChannelsResponse, ModulesInject } from '../../flow_interfaces';\n\nexport function getOperation(): string {\n  return 'PNPushNotificationEnabledChannelsOperation';\n}\n\nexport function validateParams(modules: ModulesInject, incomingParams: ListChannelsArgs) {\n  let { device, pushGateway } = incomingParams;\n  let { config } = modules;\n\n  if (!device) return 'Missing Device ID (device)';\n  if (!pushGateway) return 'Missing GW Type (pushGateway: gcm or apns)';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: ListChannelsArgs): string {\n  let { device } = incomingParams;\n  let { config } = modules;\n  return '/v1/push/sub-key/' + config.subscribeKey + '/devices/' + device;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: ListChannelsArgs): Object {\n  let { pushGateway } = incomingParams;\n  return { type: pushGateway };\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: Array<string>): ListChannelsResponse {\n  return { channels: serverResponse };\n}\n"],"sourceRoot":"/source/"}