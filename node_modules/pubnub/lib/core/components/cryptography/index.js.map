{"version":3,"sources":["core/components/cryptography/index.js"],"names":[],"mappings":"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","file":"core/components/cryptography/index.js","sourcesContent":["/* @flow */\n\nimport Config from '../config';\nimport CryptoJS from './hmac-sha256.js';\n\ntype CryptoConstruct = {\n  config: Config,\n}\n\nexport default class {\n\n  _config: Config;\n  _iv: string;\n  _allowedKeyEncodings: Array<string>;\n  _allowedKeyLengths: Array<number>;\n  _allowedModes: Array<string>;\n  _defaultOptions: Object;\n\n  constructor({ config }: CryptoConstruct) {\n    this._config = config;\n\n    this._iv = '0123456789012345';\n\n    this._allowedKeyEncodings = ['hex', 'utf8', 'base64', 'binary'];\n    this._allowedKeyLengths = [128, 256];\n    this._allowedModes = ['ecb', 'cbc'];\n\n    this._defaultOptions = {\n      encryptKey: true,\n      keyEncoding: 'utf8',\n      keyLength: 256,\n      mode: 'cbc'\n    };\n  }\n\n  HMACSHA256(data: string): string {\n    let hash = CryptoJS.HmacSHA256(data, this._config.secretKey);\n    return hash.toString(CryptoJS.enc.Base64);\n  }\n\n  SHA256(s: string): string {\n    return CryptoJS.SHA256(s).toString(CryptoJS.enc.Hex);\n  }\n\n  _parseOptions(incomingOptions: ?Object): Object {\n    // Defaults\n    let options = incomingOptions || {};\n    if (!options.hasOwnProperty('encryptKey')) options.encryptKey = this._defaultOptions.encryptKey;\n    if (!options.hasOwnProperty('keyEncoding')) options.keyEncoding = this._defaultOptions.keyEncoding;\n    if (!options.hasOwnProperty('keyLength')) options.keyLength = this._defaultOptions.keyLength;\n    if (!options.hasOwnProperty('mode')) options.mode = this._defaultOptions.mode;\n\n    // Validation\n    if (this._allowedKeyEncodings.indexOf(options.keyEncoding.toLowerCase()) === -1) {\n      options.keyEncoding = this._defaultOptions.keyEncoding;\n    }\n\n    if (this._allowedKeyLengths.indexOf(parseInt(options.keyLength, 10)) === -1) {\n      options.keyLength = this._defaultOptions.keyLength;\n    }\n\n    if (this._allowedModes.indexOf(options.mode.toLowerCase()) === -1) {\n      options.mode = this._defaultOptions.mode;\n    }\n\n    return options;\n  }\n\n  _decodeKey(key: string, options: Object): string {\n    if (options.keyEncoding === 'base64') {\n      return CryptoJS.enc.Base64.parse(key);\n    } else if (options.keyEncoding === 'hex') {\n      return CryptoJS.enc.Hex.parse(key);\n    } else {\n      return key;\n    }\n  }\n\n  _getPaddedKey(key: string, options: Object): string {\n    key = this._decodeKey(key, options);\n    if (options.encryptKey) {\n      return CryptoJS.enc.Utf8.parse(this.SHA256(key).slice(0, 32));\n    } else {\n      return key;\n    }\n  }\n\n  _getMode(options: Object): string {\n    if (options.mode === 'ecb') {\n      return CryptoJS.mode.ECB;\n    } else {\n      return CryptoJS.mode.CBC;\n    }\n  }\n\n  _getIV(options: Object): string | null {\n    return (options.mode === 'cbc') ? CryptoJS.enc.Utf8.parse(this._iv) : null;\n  }\n\n  encrypt(data: string, options: ?Object): Object | string | null {\n    if (!this._config.cipherKey) return data;\n    options = this._parseOptions(options);\n    let iv = this._getIV(options);\n    let mode = this._getMode(options);\n    let cipherKey = this._getPaddedKey(this._config.cipherKey, options);\n    let encryptedHexArray = CryptoJS.AES.encrypt(data, cipherKey, { iv, mode }).ciphertext;\n    let base64Encrypted = encryptedHexArray.toString(CryptoJS.enc.Base64);\n    return base64Encrypted || data;\n  }\n\n  decrypt(data: Object, options: ?Object): Object | null {\n    if (!this._config.cipherKey) return data;\n    options = this._parseOptions(options);\n    let iv = this._getIV(options);\n    let mode = this._getMode(options);\n    let cipherKey = this._getPaddedKey(this._config.cipherKey, options);\n    try {\n      let ciphertext = CryptoJS.enc.Base64.parse(data);\n      let plainJSON = CryptoJS.AES.decrypt({ ciphertext }, cipherKey, { iv, mode }).toString(CryptoJS.enc.Utf8);\n      let plaintext = JSON.parse(plainJSON);\n      return plaintext;\n    } catch (e) {\n      return null;\n    }\n  }\n\n}\n"],"sourceRoot":"/source/"}