{"version":3,"sources":["core/components/endpoint.js"],"names":[],"mappings":";;;;;;kBAae,UAAU,OAAV,EAAmB,QAAnB,EAAsC;AAAA,MAC7C,UAD6C,GACd,OADc,CAC7C,UAD6C;AAAA,MACjC,MADiC,GACd,OADc,CACjC,MADiC;AAAA,MACzB,MADyB,GACd,OADc,CACzB,MADyB;;AAEnD,MAAI,WAAW,IAAf;AACA,MAAI,iBAAiB,EAArB;;AAEA,MAAI,SAAS,YAAT,OAA4B,iBAA5B,IAAiD,SAAS,YAAT,OAA4B,0BAAjF,EAA6G;AAC3G;AACD,GAFD,MAEO;AACL;AACA;AACD;;AAED,MAAI,mBAAmB,SAAS,cAAT,CAAwB,OAAxB,EAAiC,cAAjC,CAAvB;;AAEA,MAAI,gBAAJ,EAAsB;AACpB,aAAS,sBAAsB,gBAAtB,CAAT;AACA;AACD;;AAED,MAAI,iBAAiB,SAAS,aAAT,CAAuB,OAAvB,EAAgC,cAAhC,CAArB;;AAEA,iBAAe,IAAf,GAAsB,OAAO,IAA7B;;AAEA,SAAO,IAAP,CAAY,OAAO,UAAnB,EAA+B,OAA/B,CAAuC,UAAC,GAAD,EAAS;AAC9C,QAAI,QAAQ,OAAO,UAAP,CAAkB,GAAlB,CAAZ;AACA,QAAI,EAAE,OAAO,cAAT,CAAJ,EAA8B,eAAe,GAAf,IAAsB,KAAtB;AAC/B,GAHD;;AAKA,MAAI,OAAO,aAAX,EAA0B;AACxB,mBAAe,UAAf,GAA4B,OAAO,UAAnC;AACD;;AAED,MAAI,OAAO,YAAX,EAAyB;AACvB,mBAAe,SAAf,GAA2B,eAAc,EAAd,EAA3B;AACD;;AAED,MAAI,SAAS,eAAT,MAA8B,OAAO,UAAP,EAAlC,EAAuD;AACrD,mBAAe,IAAf,GAAsB,OAAO,UAAP,EAAtB;AACD;;AAGD,MAAI,SAAS,YAAT,OAA4B,sBAAhC,EAAwD;AACtD,QAAI,YAAY,OAAO,YAAP,GAAsB,IAAtB,GAA6B,OAAO,UAApC,GAAiD,WAAjE;AACA,iBAAa,gBAAM,iBAAN,CAAwB,cAAxB,CAAb;AACA,mBAAe,SAAf,GAA2B,OAAO,UAAP,CAAkB,SAAlB,CAA3B;AACD;;AAED,MAAI,SAAS,YAAT,OAA4B,sBAAhC,EAAwD;AACtD,QAAI,aAAY,OAAO,YAAP,GAAsB,IAAtB,GAA6B,OAAO,UAApC,GAAiD,WAAjE;AACA,kBAAa,gBAAM,iBAAN,CAAwB,cAAxB,CAAb;AACA,mBAAe,SAAf,GAA2B,OAAO,UAAP,CAAkB,UAAlB,CAA3B;AACD;;AAED,MAAI,aAAa,SAAb,UAAa,CAAC,MAAD,EAA6B,OAA7B,EAAiD;AAChE,QAAI,QAAJ,EAAc;AACZ,UAAI,OAAO,KAAX,EAAkB,OAAO,SAAS,MAAT,CAAP;;AAElB,eAAS,MAAT,EAAiB,SAAS,cAAT,CAAwB,OAAxB,EAAiC,OAAjC,EAA0C,cAA1C,CAAjB;AACD;AACF,GAND;;AAQA,MAAI,qBAAJ;;AAEA,MAAI,SAAS,OAAT,IAAoB,SAAS,OAAT,CAAiB,OAAjB,EAA0B,cAA1B,CAAxB,EAAmE;AACjE,QAAI,MAAM,SAAS,OAAT,CAAiB,OAAjB,EAA0B,cAA1B,CAAV;AACA,QAAI,mBAAmB,EAAE,QAAF;AACrB,iBAAW,SAAS,YAAT,EADU;AAErB,eAAS,SAAS,iBAAT,CAA2B,OAA3B;AAFY,KAAvB;AAIA,QAAI,UAAU,SAAS,WAAT,CAAqB,OAArB,EAA8B,cAA9B,CAAd;AACA,mBAAe,WAAW,IAAX,CAAgB,cAAhB,EAAgC,OAAhC,EAAyC,gBAAzC,EAA2D,UAA3D,CAAf;AACD,GARD,MAQO;AACL,QAAI,OAAM,SAAS,MAAT,CAAgB,OAAhB,EAAyB,cAAzB,CAAV;AACA,QAAI,oBAAmB,EAAE,SAAF;AACrB,iBAAW,SAAS,YAAT,EADU;AAErB,eAAS,SAAS,iBAAT,CAA2B,OAA3B;AAFY,KAAvB;AAIA,mBAAe,WAAW,GAAX,CAAe,cAAf,EAA+B,iBAA/B,EAAiD,UAAjD,CAAf;AACD;;AAED,MAAI,SAAS,YAAT,OAA4B,sBAAhC,EAAwD;AACtD,WAAO,YAAP;AACD;AACF,C;;AAhGD;;AACA;;;;AACA;;;;;;AAEA,SAAS,WAAT,CAAqB,YAArB,EAA2C,IAA3C,EAAiE;AAC/D,eAAa,IAAb,GAAoB,IAApB;AACA,SAAO,YAAP;AACD;;AAED,SAAS,qBAAT,CAA+B,OAA/B,EAAwD;AACtD,SAAO,YAAY,EAAE,gBAAF,EAAZ,EAAyB,iBAAzB,CAAP;AACD","file":"core/components/endpoint.js","sourcesContent":["import { StatusAnnouncement } from '../flow_interfaces';\nimport uuidGenerator from 'uuid';\nimport utils from '../utils';\n\nfunction createError(errorPayload: Object, type: string): Object {\n  errorPayload.type = type;\n  return errorPayload;\n}\n\nfunction createValidationError(message: string): Object {\n  return createError({ message }, 'validationError');\n}\n\nexport default function (modules, endpoint, ...args) {\n  let { networking, config, crypto } = modules;\n  let callback = null;\n  let incomingParams = {};\n\n  if (endpoint.getOperation() === 'PNTimeOperation' || endpoint.getOperation() === 'PNChannelGroupsOperation') {\n    callback = args[0];\n  } else {\n    incomingParams = args[0];\n    callback = args[1];\n  }\n\n  let validationResult = endpoint.validateParams(modules, incomingParams);\n\n  if (validationResult) {\n    callback(createValidationError(validationResult));\n    return;\n  }\n\n  let outgoingParams = endpoint.prepareParams(modules, incomingParams);\n\n  outgoingParams.uuid = config.UUID;\n\n  Object.keys(config.baseParams).forEach((key) => {\n    let value = config.baseParams[key];\n    if (!(key in outgoingParams)) outgoingParams[key] = value;\n  });\n\n  if (config.useInstanceId) {\n    outgoingParams.instanceid = config.instanceId;\n  }\n\n  if (config.useRequestId) {\n    outgoingParams.requestid = uuidGenerator.v4();\n  }\n\n  if (endpoint.isAuthSupported() && config.getAuthKey()) {\n    outgoingParams.auth = config.getAuthKey();\n  }\n\n  // encrypt the params\n  if (endpoint.getOperation() === 'PNAccessManagerGrant') {\n    let signInput = config.subscribeKey + '\\n' + config.publishKey + '\\ngrant\\n';\n    signInput += utils.signPamFromParams(outgoingParams);\n    outgoingParams.signature = crypto.HMACSHA256(signInput);\n  }\n\n  if (endpoint.getOperation() === 'PNAccessManagerAudit') {\n    let signInput = config.subscribeKey + '\\n' + config.publishKey + '\\naudit\\n';\n    signInput += utils.signPamFromParams(outgoingParams);\n    outgoingParams.signature = crypto.HMACSHA256(signInput);\n  }\n\n  let onResponse = (status: StatusAnnouncement, payload: Object) => {\n    if (callback) {\n      if (status.error) return callback(status);\n\n      callback(status, endpoint.handleResponse(modules, payload, incomingParams));\n    }\n  };\n\n  let callInstance;\n\n  if (endpoint.usePost && endpoint.usePost(modules, incomingParams)) {\n    let url = endpoint.postURL(modules, incomingParams);\n    let networkingParams = { url,\n      operation: endpoint.getOperation(),\n      timeout: endpoint.getRequestTimeout(modules)\n    };\n    let payload = endpoint.postPayload(modules, incomingParams);\n    callInstance = networking.POST(outgoingParams, payload, networkingParams, onResponse);\n  } else {\n    let url = endpoint.getURL(modules, incomingParams);\n    let networkingParams = { url,\n      operation: endpoint.getOperation(),\n      timeout: endpoint.getRequestTimeout(modules)\n    };\n    callInstance = networking.GET(outgoingParams, networkingParams, onResponse);\n  }\n\n  if (endpoint.getOperation() === 'PNSubscribeOperation') {\n    return callInstance;\n  }\n}\n"],"sourceRoot":"/source/"}