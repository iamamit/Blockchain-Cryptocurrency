{"version":3,"sources":["core/components/config.js"],"names":[],"mappings":";;;;;;;;AAEA;;;;AACA;;;;;;;AAkFE,wBAAiD;AAAA,QAAnC,KAAmC,QAAnC,KAAmC;AAAA,QAA5B,EAA4B,QAA5B,EAA4B;;AAAA;;AAC/C,SAAK,GAAL,GAAW,EAAX;;AAEA,SAAK,UAAL,GAAkB,eAAc,EAAd,EAAlB;AACA,SAAK,SAAL,GAAiB,MAAM,SAAvB;AACA,SAAK,YAAL,GAAoB,MAAM,YAA1B;AACA,SAAK,UAAL,GAAkB,MAAM,UAAxB;AACA,SAAK,UAAL,CAAgB,MAAM,OAAtB;AACA,SAAK,YAAL,CAAkB,MAAM,SAAxB;AACA,SAAK,UAAL,GAAkB,MAAM,MAAN,IAAgB,EAAlC;;AAEA,SAAK,mBAAL,CAAyB,MAAM,gBAA/B;;AAEA,SAAK,MAAL,GAAc,MAAM,MAAN,IAAgB,mBAA9B;AACA,SAAK,MAAL,GAAc,MAAM,GAAN,IAAa,KAA3B;;AAGA,QAAI,OAAO,QAAP,KAAoB,WAApB,IAAmC,SAAS,QAAT,KAAsB,QAA7D,EAAuE;AACrE,WAAK,MAAL,GAAc,IAAd;AACD;;AAED,SAAK,YAAL,GAAoB,MAAM,YAAN,IAAsB,KAA1C;AACA,SAAK,mBAAL,GAA2B,MAAM,mBAAN,IAA6B,KAAxD;;AAEA,SAAK,wBAAL,GAAgC,MAAM,wBAAN,IAAkC,IAAlE;AACA,SAAK,4BAAL,GAAoC,MAAM,4BAAN,IAAsC,KAA1E;;AAEA,SAAK,aAAL,GAAqB,MAAM,aAAN,IAAuB,KAA5C;AACA,SAAK,YAAL,GAAoB,MAAM,YAAN,IAAsB,KAA1C;;AAGA,SAAK,qBAAL,CAA2B,MAAM,2BAAN,IAAqC,KAAK,IAArE;;AAEA,SAAK,mBAAL,CAAyB,MAAM,uBAAN,IAAiC,MAAM,IAAhE;;AAEA,SAAK,mBAAL,CAAyB,MAAM,aAAN,IAAuB,IAAhD;;AAEA,SAAK,kBAAL,CAAwB,MAAM,eAAN,IAAyB,GAAjD;;AAEA,QAAI,MAAM,iBAAV,EAA6B;AAC3B,WAAK,oBAAL,CAA0B,MAAM,iBAAhC;AACD;;AAED,SAAK,OAAL,CAAa,KAAK,WAAL,CAAiB,MAAM,IAAvB,CAAb;AACD;;;;iCAGoB;AAAE,aAAO,KAAK,OAAZ;AAAsB;;;+BAClC,G,EAAmB;AAAE,WAAK,OAAL,GAAe,GAAf,CAAoB,OAAO,IAAP;AAAc;;;iCACrD,G,EAAmB;AAAE,WAAK,SAAL,GAAiB,GAAjB,CAAsB,OAAO,IAAP;AAAc;;;8BACpD;AAAE,aAAO,KAAK,IAAZ;AAAmB;;;4BAC/B,G,EAAmB;AACzB,UAAI,KAAK,GAAL,IAAY,KAAK,GAAL,CAAS,GAAzB,EAA8B,KAAK,GAAL,CAAS,GAAT,CAAa,KAAK,YAAL,GAAoB,MAAjC,EAAyC,GAAzC;AAC9B,WAAK,IAAL,GAAY,GAAZ;AACA,aAAO,IAAP;AACD;;;0CAE6B;AAAE,aAAO,KAAK,gBAAZ;AAA+B;;;wCAC3C,G,EAAmB;AAAE,WAAK,gBAAL,GAAwB,GAAxB,CAA6B,OAAO,IAAP;AAAc;;;yCAEvD;AAAE,aAAO,KAAK,gBAAZ;AAA+B;;;uCAC3C,G,EAAmB;AACpC,WAAK,gBAAL,GAAwB,GAAxB;AACA,WAAK,oBAAL,CAA2B,KAAK,gBAAL,GAAwB,CAAzB,GAA8B,CAAxD;AACA,aAAO,IAAP;AACD;;;2CAE8B;AAAE,aAAO,KAAK,kBAAZ;AAAiC;;;yCAC7C,G,EAAmB;AAAE,WAAK,kBAAL,GAA0B,GAA1B,CAA+B,OAAO,IAAP;AAAc;;;0CAGzD;AAAE,aAAO,KAAK,wBAAZ;AAAuC;;;wCACnD,G,EAAmB;AAAE,WAAK,wBAAL,GAAgC,GAAhC,CAAqC,OAAO,IAAP;AAAc;;;4CAE5D;AAAE,aAAO,KAAK,4BAAZ;AAA2C;;;0CACvD,G,EAAmB;AAAE,WAAK,4BAAL,GAAoC,GAApC,CAAyC,OAAO,IAAP;AAAc;;;0CAEnE;AAAE,aAAO,KAAK,cAAZ;AAA6B;;;wCAC1C,G,EAAoB;AAAE,WAAK,cAAL,GAAsB,GAAtB,CAA2B,OAAO,IAAP;AAAc;;;gCAEvE,Y,EAA8B;AAExC,UAAI,YAAJ,EAAkB;AAChB,eAAO,YAAP;AACD;;AAGD,UAAI,KAAK,GAAL,IAAY,KAAK,GAAL,CAAS,GAArB,IAA4B,KAAK,GAAL,CAAS,GAAT,CAAa,KAAK,YAAL,GAAoB,MAAjC,CAAhC,EAA0E;AACxE,eAAO,KAAK,GAAL,CAAS,GAAT,CAAa,KAAK,YAAL,GAAoB,MAAjC,CAAP;AACD;;AAGD,aAAO,eAAc,EAAd,EAAP;AACD","file":"core/components/config.js","sourcesContent":["/* @flow */\n\nimport uuidGenerator from 'uuid';\nimport { InternalSetupStruct, DatabaseInterface } from '../flow_interfaces';\n\ntype ConfigConstructArgs = {\n  setup: InternalSetupStruct,\n  db: DatabaseInterface\n}\n\nexport default class {\n\n  _db: DatabaseInterface;\n\n  subscribeKey: string;\n  publishKey: string;\n  secretKey: string;\n  cipherKey: string;\n  authKey: string;\n  UUID: string;\n\n  /*\n    if _useInstanceId is true, this instanceId will be added to all requests\n  */\n  instanceId: string;\n\n  /*\n    base params to be inclded with each call\n  */\n  baseParams: Object;\n  /*\n    filter expression to pass along when subscribing.\n  */\n  filterExpression: string;\n  /*\n    configuration to supress leave events; when a presence leave is performed\n    this configuration will disallow the leave event from happening\n  */\n  suppressLeaveEvents: boolean;\n\n  /*\n    use SSL for http requests?\n  */\n  secure: boolean;\n\n  // Custom optional origin.\n  origin: string;\n\n  // log verbosity: true to output lots of info\n  logVerbosity: boolean;\n\n  // if instanceId config is true, the SDK will pass the unique instance identifier to the server as instanceId=<UUID>\n  useInstanceId: boolean;\n\n  // if requestId config is true, the SDK will pass a unique request identifier with each request as request_id=<UUID>\n  useRequestId: boolean;\n\n  // alert when a heartbeat works out.\n  announceSuccessfulHeartbeats: boolean;\n  announceFailedHeartbeats: boolean;\n\n  /*\n    how long the server will wait before declaring that the client is gone.\n  */\n  _presenceTimeout: number;\n\n  /*\n    how often (in seconds) the client should announce its presence to server\n  */\n  _heartbeatInterval: number;\n\n  /*\n    how long to wait for the server when running the subscribe loop\n  */\n  _subscribeRequestTimeout: number;\n  /*\n    how long to wait for the server when making transactional requests\n  */\n  _transactionalRequestTimeout: number;\n  /*\n    use send beacon API when unsubscribing.\n    https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon\n  */\n  _useSendBeacon: boolean;\n\n  constructor({ setup, db } : ConfigConstructArgs) {\n    this._db = db;\n\n    this.instanceId = uuidGenerator.v4();\n    this.secretKey = setup.secretKey;\n    this.subscribeKey = setup.subscribeKey;\n    this.publishKey = setup.publishKey;\n    this.setAuthKey(setup.authKey);\n    this.setCipherKey(setup.cipherKey);\n    this.baseParams = setup.params || {};\n\n    this.setFilterExpression(setup.filterExpression);\n\n    this.origin = setup.origin || 'pubsub.pubnub.com';\n    this.secure = setup.ssl || false;\n\n    // if location config exist and we are in https, force secure to true.\n    if (typeof location !== 'undefined' && location.protocol === 'https:') {\n      this.secure = true;\n    }\n\n    this.logVerbosity = setup.logVerbosity || false;\n    this.suppressLeaveEvents = setup.suppressLeaveEvents || false;\n\n    this.announceFailedHeartbeats = setup.announceFailedHeartbeats || true;\n    this.announceSuccessfulHeartbeats = setup.announceSuccessfulHeartbeats || false;\n\n    this.useInstanceId = setup.useInstanceId || false;\n    this.useRequestId = setup.useRequestId || false;\n\n    // set timeout to how long a transaction request will wait for the server (default 15 seconds)\n    this.setTransactionTimeout(setup.transactionalRequestTimeout || 15 * 1000);\n    // set timeout to how long a subscribe event loop will run (default 310 seconds)\n    this.setSubscribeTimeout(setup.subscribeRequestTimeout || 310 * 1000);\n    // set config on beacon (https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon) usage\n    this.setSendBeaconConfig(setup.useSendBeacon || true);\n    // how long the SDK will report the client to be alive before issuing a timeout\n    this.setPresenceTimeout(setup.presenceTimeout || 300);\n\n    if (setup.heartbeatInterval) {\n      this.setHeartbeatInterval(setup.heartbeatInterval);\n    }\n\n    this.setUUID(this._decideUUID(setup.uuid)); // UUID decision depends on subKey.\n  }\n\n  // exposed setters\n  getAuthKey(): string { return this.authKey; }\n  setAuthKey(val: string): this { this.authKey = val; return this; }\n  setCipherKey(val: string): this { this.cipherKey = val; return this; }\n  getUUID(): string { return this.UUID; }\n  setUUID(val: string): this {\n    if (this._db && this._db.set) this._db.set(this.subscribeKey + 'uuid', val);\n    this.UUID = val;\n    return this;\n  }\n\n  getFilterExpression(): string { return this.filterExpression; }\n  setFilterExpression(val: string): this { this.filterExpression = val; return this; }\n\n  getPresenceTimeout(): number { return this._presenceTimeout; }\n  setPresenceTimeout(val: number): this {\n    this._presenceTimeout = val;\n    this.setHeartbeatInterval((this._presenceTimeout / 2) - 1);\n    return this;\n  }\n\n  getHeartbeatInterval(): number { return this._heartbeatInterval; }\n  setHeartbeatInterval(val: number): this { this._heartbeatInterval = val; return this; }\n\n  // deprecated setters.\n  getSubscribeTimeout(): number { return this._subscribeRequestTimeout; }\n  setSubscribeTimeout(val: number): this { this._subscribeRequestTimeout = val; return this; }\n\n  getTransactionTimeout(): number { return this._transactionalRequestTimeout; }\n  setTransactionTimeout(val: number): this { this._transactionalRequestTimeout = val; return this; }\n\n  isSendBeaconEnabled(): boolean { return this._useSendBeacon; }\n  setSendBeaconConfig(val: boolean): this { this._useSendBeacon = val; return this; }\n\n  _decideUUID(providedUUID: string): string {\n    // if the uuid was provided by setup, use this UUID.\n    if (providedUUID) {\n      return providedUUID;\n    }\n\n    // if the database module is enabled and we have something saved, use this.\n    if (this._db && this._db.get && this._db.get(this.subscribeKey + 'uuid')) {\n      return this._db.get(this.subscribeKey + 'uuid');\n    }\n\n    // randomize the UUID and push to storage\n    return uuidGenerator.v4();\n  }\n\n}\n"],"sourceRoot":"/source/"}